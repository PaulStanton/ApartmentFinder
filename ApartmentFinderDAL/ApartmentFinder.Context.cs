//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApartmentFinderDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ApartmentFinderEntities : DbContext
    {
        public ApartmentFinderEntities()
            : base("name=ApartmentFinderEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Apartment> Apartments { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AllUsersFavoritedRoom> AllUsersFavoritedRooms { get; set; }
        public virtual DbSet<ApartmentInformation> ApartmentInformations { get; set; }
        public virtual DbSet<RoomInformation> RoomInformations { get; set; }
    
        [DbFunction("ApartmentFinderEntities", "AllRoomsByCity")]
        public virtual IQueryable<AllRoomsByCity_Result> AllRoomsByCity(string cityName)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AllRoomsByCity_Result>("[ApartmentFinderEntities].[AllRoomsByCity](@CityName)", cityNameParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "AllRoomsByState")]
        public virtual IQueryable<AllRoomsByState_Result> AllRoomsByState(string stateName)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AllRoomsByState_Result>("[ApartmentFinderEntities].[AllRoomsByState](@StateName)", stateNameParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "AllRoomsByZip")]
        public virtual IQueryable<AllRoomsByZip_Result> AllRoomsByZip(Nullable<int> zip_code)
        {
            var zip_codeParameter = zip_code.HasValue ?
                new ObjectParameter("zip_code", zip_code) :
                new ObjectParameter("zip_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AllRoomsByZip_Result>("[ApartmentFinderEntities].[AllRoomsByZip](@zip_code)", zip_codeParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "AvailableRoomsByCity")]
        public virtual IQueryable<AvailableRoomsByCity_Result> AvailableRoomsByCity(string cityName)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AvailableRoomsByCity_Result>("[ApartmentFinderEntities].[AvailableRoomsByCity](@CityName)", cityNameParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "AvailableRoomsByState")]
        public virtual IQueryable<AvailableRoomsByState_Result> AvailableRoomsByState(string stateName)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AvailableRoomsByState_Result>("[ApartmentFinderEntities].[AvailableRoomsByState](@StateName)", stateNameParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "AvailableRoomsByZip")]
        public virtual IQueryable<AvailableRoomsByZip_Result> AvailableRoomsByZip(Nullable<int> zip_code)
        {
            var zip_codeParameter = zip_code.HasValue ?
                new ObjectParameter("zip_code", zip_code) :
                new ObjectParameter("zip_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AvailableRoomsByZip_Result>("[ApartmentFinderEntities].[AvailableRoomsByZip](@zip_code)", zip_codeParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "AvailableRoomsinApartment")]
        public virtual IQueryable<AvailableRoomsinApartment_Result> AvailableRoomsinApartment(string apartmentname, string zipcode)
        {
            var apartmentnameParameter = apartmentname != null ?
                new ObjectParameter("apartmentname", apartmentname) :
                new ObjectParameter("apartmentname", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AvailableRoomsinApartment_Result>("[ApartmentFinderEntities].[AvailableRoomsinApartment](@apartmentname, @zipcode)", apartmentnameParameter, zipcodeParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "FavoritedRoom")]
        public virtual IQueryable<FavoritedRoom_Result> FavoritedRoom(string roomNumber, string apartmentName, string zipcode)
        {
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FavoritedRoom_Result>("[ApartmentFinderEntities].[FavoritedRoom](@RoomNumber, @ApartmentName, @zipcode)", roomNumberParameter, apartmentNameParameter, zipcodeParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "RoomsInApartment")]
        public virtual IQueryable<RoomsInApartment_Result> RoomsInApartment(string apartmentname, string zipcode)
        {
            var apartmentnameParameter = apartmentname != null ?
                new ObjectParameter("apartmentname", apartmentname) :
                new ObjectParameter("apartmentname", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<RoomsInApartment_Result>("[ApartmentFinderEntities].[RoomsInApartment](@apartmentname, @zipcode)", apartmentnameParameter, zipcodeParameter);
        }
    
        [DbFunction("ApartmentFinderEntities", "UserFavorites")]
        public virtual IQueryable<UserFavorites_Result> UserFavorites(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UserFavorites_Result>("[ApartmentFinderEntities].[UserFavorites](@username)", usernameParameter);
        }
    
        public virtual int AddFavorite(string username, string roomNumber, string apartmentName, string zipCode)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFavorite", usernameParameter, roomNumberParameter, apartmentNameParameter, zipCodeParameter);
        }
    
        public virtual int CreateApartment(string apartmentName, string street, string contactEmail, string contactPhone, Nullable<int> cityID, string picture)
        {
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateApartment", apartmentNameParameter, streetParameter, contactEmailParameter, contactPhoneParameter, cityIDParameter, pictureParameter);
        }
    
        public virtual int CreateCity(string name, Nullable<int> zipcode, Nullable<int> stateid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var zipcodeParameter = zipcode.HasValue ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(int));
    
            var stateidParameter = stateid.HasValue ?
                new ObjectParameter("stateid", stateid) :
                new ObjectParameter("stateid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCity", nameParameter, zipcodeParameter, stateidParameter);
        }
    
        public virtual int CreateRoom(string numberOfBeds, string roomNumber, Nullable<bool> isFilled, Nullable<decimal> price, Nullable<int> zipCode, string apartmentName, Nullable<int> numberOfBaths)
        {
            var numberOfBedsParameter = numberOfBeds != null ?
                new ObjectParameter("NumberOfBeds", numberOfBeds) :
                new ObjectParameter("NumberOfBeds", typeof(string));
    
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var isFilledParameter = isFilled.HasValue ?
                new ObjectParameter("isFilled", isFilled) :
                new ObjectParameter("isFilled", typeof(bool));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var numberOfBathsParameter = numberOfBaths.HasValue ?
                new ObjectParameter("NumberOfBaths", numberOfBaths) :
                new ObjectParameter("NumberOfBaths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateRoom", numberOfBedsParameter, roomNumberParameter, isFilledParameter, priceParameter, zipCodeParameter, apartmentNameParameter, numberOfBathsParameter);
        }
    
        public virtual int CreateUser(string firstname, string lastname, string username, string password, string email)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUser", firstnameParameter, lastnameParameter, usernameParameter, passwordParameter, emailParameter);
        }
    
        public virtual int DeleteApartment(string apartmentName, string zipCode)
        {
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApartment", apartmentNameParameter, zipCodeParameter);
        }
    
        public virtual int DeleteRoom(string roomNumber, string apartmentName, string zipCOde)
        {
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var zipCOdeParameter = zipCOde != null ?
                new ObjectParameter("ZipCOde", zipCOde) :
                new ObjectParameter("ZipCOde", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoom", roomNumberParameter, apartmentNameParameter, zipCOdeParameter);
        }
    
        public virtual int DeleteUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", usernameParameter);
        }
    
        public virtual int RemoveFavorite(string username, string roomNumber, string apartmentName, string zipCode)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveFavorite", usernameParameter, roomNumberParameter, apartmentNameParameter, zipCodeParameter);
        }
    
        public virtual int UpdateApartment(string oldApartmentName, string oldZipCode, string newApartmentName, string newZipCode, string streetAddress, string contactEmail, string contactPhone, string apartmentPicture)
        {
            var oldApartmentNameParameter = oldApartmentName != null ?
                new ObjectParameter("OldApartmentName", oldApartmentName) :
                new ObjectParameter("OldApartmentName", typeof(string));
    
            var oldZipCodeParameter = oldZipCode != null ?
                new ObjectParameter("OldZipCode", oldZipCode) :
                new ObjectParameter("OldZipCode", typeof(string));
    
            var newApartmentNameParameter = newApartmentName != null ?
                new ObjectParameter("NewApartmentName", newApartmentName) :
                new ObjectParameter("NewApartmentName", typeof(string));
    
            var newZipCodeParameter = newZipCode != null ?
                new ObjectParameter("NewZipCode", newZipCode) :
                new ObjectParameter("NewZipCode", typeof(string));
    
            var streetAddressParameter = streetAddress != null ?
                new ObjectParameter("StreetAddress", streetAddress) :
                new ObjectParameter("StreetAddress", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var apartmentPictureParameter = apartmentPicture != null ?
                new ObjectParameter("ApartmentPicture", apartmentPicture) :
                new ObjectParameter("ApartmentPicture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateApartment", oldApartmentNameParameter, oldZipCodeParameter, newApartmentNameParameter, newZipCodeParameter, streetAddressParameter, contactEmailParameter, contactPhoneParameter, apartmentPictureParameter);
        }
    
        public virtual int UpdateRoom(Nullable<int> numberOfBeds, string oldRoomNumber, string newRoomNumber, Nullable<bool> isFilled, Nullable<decimal> price, string apartmentName, string zipCode, Nullable<int> numberOfBaths)
        {
            var numberOfBedsParameter = numberOfBeds.HasValue ?
                new ObjectParameter("NumberOfBeds", numberOfBeds) :
                new ObjectParameter("NumberOfBeds", typeof(int));
    
            var oldRoomNumberParameter = oldRoomNumber != null ?
                new ObjectParameter("OldRoomNumber", oldRoomNumber) :
                new ObjectParameter("OldRoomNumber", typeof(string));
    
            var newRoomNumberParameter = newRoomNumber != null ?
                new ObjectParameter("NewRoomNumber", newRoomNumber) :
                new ObjectParameter("NewRoomNumber", typeof(string));
    
            var isFilledParameter = isFilled.HasValue ?
                new ObjectParameter("IsFilled", isFilled) :
                new ObjectParameter("IsFilled", typeof(bool));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var numberOfBathsParameter = numberOfBaths.HasValue ?
                new ObjectParameter("NumberOfBaths", numberOfBaths) :
                new ObjectParameter("NumberOfBaths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoom", numberOfBedsParameter, oldRoomNumberParameter, newRoomNumberParameter, isFilledParameter, priceParameter, apartmentNameParameter, zipCodeParameter, numberOfBathsParameter);
        }
    
        public virtual int UpdateUser(string oldUserName, string newUserName, string password, string email, string firstname, string lastname)
        {
            var oldUserNameParameter = oldUserName != null ?
                new ObjectParameter("OldUserName", oldUserName) :
                new ObjectParameter("OldUserName", typeof(string));
    
            var newUserNameParameter = newUserName != null ?
                new ObjectParameter("NewUserName", newUserName) :
                new ObjectParameter("NewUserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", oldUserNameParameter, newUserNameParameter, passwordParameter, emailParameter, firstnameParameter, lastnameParameter);
        }
    }
}
